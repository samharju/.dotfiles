#!/usr/bin/env bash
set -e

printaction() {
    name=${FUNCNAME[1]}
    if command -v figlet &> /dev/null; then
        printf "\033[0;32m"
        echo "${name#install_} $1" | figlet
        printf "\033[0m\n"
    else
        echo "$name"
    fi
}

install_zsh() {
    printaction
    if ! command -v zsh; then
        sudo apt install zsh
        sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
    fi
    echo "zsh ok"
}

# ------------------------------------------------------------

install_nvim() {
    local version=v0.9.5
    printaction "$version"

    current=$(nvim -v | head -1 | cut -d ' ' -f2)
    if [ "$current" == "$version" ]; then
        echo up to date
        return
    fi

    wget https://github.com/neovim/neovim/releases/download/$version/nvim.appimage
    wget https://github.com/neovim/neovim/releases/download/$version/nvim.appimage.sha256sum

    sha256sum -c nvim.appimage.sha256sum
    rm nvim.appimage.sha256sum

    chmod u+x nvim.appimage
    mv nvim.appimage ~/.local/bin/nvim
    nvim --version
}

# ------------------------------------------------------------
install_formatters() {
    printaction
    npm i -g prettier
    npm i -g @fsouza/prettierd


    go install github.com/fatih/gomodifytags@latest
    go install github.com/josharian/impl@latest
    go install golang.org/x/tools/cmd/goimports@latest
    go install github.com/segmentio/golines@latest
    curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh \
        | sh -s -- -b $(go env GOPATH)/bin v1.55.2

}

# ------------------------------------------------------------
install_apt_packages() {
    printaction
    sudo add-apt-repository universe
    sudo apt update
    sudo apt install \
        zip \
        unzip \
        ripgrep \
        shellcheck \
        tmux \
        figlet \
        libfuse2 \
        zsh
    sudo apt autoremove -y
}

install_nvm() {
    printaction
    curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash
    source ~/.zshrc
    nvm install stable
}

# ------------------------------------------------------------
install_fuck() {
    printaction
    pip3 install thefuck --user
}

# ------------------------------------------------------------
install_python() {
    local version=3.10.13
    printaction "$version"

    if ! command -v pyenv; then
        git submodule update --init --remote ~/.pyenv
    fi

    [[ -z "$PYENV_ROOT" ]] && echo "refresh env with . ~/.zshrc" && return 1

    pyenv versions | grep -q "$version" && echo "up to date" && return 0

    # https://github.com/pyenv/pyenv/wiki#suggested-build-environment
    sudo apt update
    sudo apt install build-essential libssl-dev zlib1g-dev \
        libbz2-dev libreadline-dev libsqlite3-dev curl \
        libncursesw5-dev xz-utils tk-dev libxml2-dev libxmlsec1-dev libffi-dev liblzma-dev
    pyenv install 3.10.13
}

# ------------------------------------------------------------
install_go() {
    local version=1.21.6
    local shasum=3f934f40ac360b9c01f616a9aa1796d227d8b0328bf64cb045c7b8c4ee9caea4

    printaction $version

    if [[ $(go version || true) == "go version go$version linux/amd64" ]]; then
        echo up to date
        return
    fi
    local pkg=go$version.linux-amd64.tar.gz
    wget https://go.dev/dl/$pkg
    sha256sum -c <<< "$shasum $pkg"
    sudo rm -rf /usr/local/go
    sudo tar -C /usr/local -xzf $pkg
    go version
}

# ------------------------------------------------------------

install_docker() {
    printaction
    sudo apt remove docker.io docker-doc docker-compose docker-compose-v2 podman-docker containerd runc

    sudo apt-get update
    sudo apt install ca-certificates curl gnupg

    sudo mkdir -m 0755 -p /etc/apt/keyrings
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
    echo \
        "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
        $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
        sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

    sudo apt update
    sudo apt install \
        docker-ce \
        docker-ce-cli \
        containerd.io \
        docker-buildx-plugin \
        docker-compose-plugin

    sudo apt autoremove -y
}
# ------------------------------------------------------------

install_fzf() {
    printaction
    ~/.fzf/install
    sudo apt install fd-find
    ln -s "$(command -v fdfind)" ~/.local/bin/fd
}

# ------------------------------------------------------------

install_bat() {
    printaction
    filename=bat-musl_0.23.0_amd64.deb
    wget "https://github.com/sharkdp/bat/releases/download/v0.23.0/$filename"
    sudo dpkg -i "$filename"
}

# ------------------------------------------------------------

install_lazygit() {
    printaction
    go install github.com/jesseduffield/lazygit@latest
}

# ------------------------------------------------------------

if [[ $# -eq 0 ]]; then
    echo "apt_packages nvm zsh nvim python formatters fuck go docker fzf bat lazygit"
fi

while test $# -gt 0
do
    case "$1" in
        zsh)
            install_zsh
            ;;
        nvim)
            install_nvim
            ;;
        python)
            install_python
            ;;
        formatters)
            install_formatters
            ;;
        apt_packages)
            install_apt_packages
            ;;
        nvm)
            install_nvm
            ;;
        fuck)
            install_fuck
            ;;
        go)
            install_go
            ;;
        docker)
            install_docker
            ;;
        fzf)
            install_fzf
            ;;
        bat)
            install_bat
            ;;
        lazygit)
            install_lazygit
            ;;
        *)
            echo "invalid command: $1"
            ;;
    esac
    shift
done

