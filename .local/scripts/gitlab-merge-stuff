#!/home/sami/.pyenv/shims/python3.10

import argparse
import logging
import os
import re
import subprocess

import requests

logging.basicConfig(level=logging.INFO, format="%(message)s")

logger = logging.getLogger(__name__)


GITLAB_HOST = os.getenv("GITLAB_HOST", "")
TOKEN = os.getenv("GITLAB_TOKEN", "")

q = """
query mergenotes($fullpaths: [String!], $source: [String!]) {
  projects(fullPaths: $fullpaths) {
    nodes {
      mergeRequests(state: opened, sourceBranches: $source) {
        nodes {
          title
          author {
            username
          }
          webUrl
          mergeStatusEnum
          shouldBeRebased
          mergeableDiscussionsState
          headPipeline {
            status
          }
          notes(filter: ONLY_COMMENTS) {
            nodes {
              resolvable
              resolved
              resolvedBy {
                username
              }
              author {
                username
              }
              body
              position {
                newLine
                newPath
              }
            }
          }
        }
      }
    }
  }
}
"""


def merge_request_comments(
    project, branch, show_resolved=False, show_merge_comments=False
):
    res = requests.post(
        GITLAB_HOST + "/api/graphql",
        headers={"Authorization": "Bearer " + TOKEN},
        json={
            "query": q,
            "variables": {"fullpaths": [project], "source": [branch]},
        },
    )
    res.raise_for_status()
    d = res.json()
    logger.debug(d)

    projects = d["data"]["projects"]["nodes"]
    if not projects:
        logger.error("project not found")
        return {}
    mergerequests = projects[0]["mergeRequests"]["nodes"]

    if not mergerequests:
        logger.info("merge requests not found")
        return {}

    mr = mergerequests[0]
    out = {
        "title": mr["title"],
        "author": mr["author"]["username"],
        "pipeline": mr["headPipeline"]["status"],
        "status": mr["mergeStatusEnum"],
        "url": mr["webUrl"],
        "comments": [],
    }

    if mr["shouldBeRebased"]:
        out["status"] = "CANNOT_NEED_REBASE"
    if not mr["mergeableDiscussionsState"]:
        out["status"] = "CANNOT_OPEN_DISCUSSIONS"

    notes = mr["notes"]["nodes"]
    if not notes:
        logger.info("no comments found")
        return out

    for note in notes:
        type_ = "i"
        if note["resolvable"]:
            if not show_resolved and note["resolved"]:
                continue
            type_ = "n" if note["resolved"] else "e"

        n = {
            "type": type_,
            "author": note["author"]["username"],
            "msg": note["body"],
        }
        if note["resolved"]:
            n["msg"] = f'({note["resolvedBy"]}) {n["msg"]}'
        if note.get("position"):
            n["file"] = note["position"]["newPath"]
            n["line"] = note["position"]["newLine"]
        elif not show_merge_comments:
            continue
        out["comments"].append(n)

    return out


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--resolved", action="store_true", help="show resolved comments"
    )
    parser.add_argument(
        "--no-merge-comments",
        action="store_false",
        help="do not show merge comments",
    )
    parser.add_argument("--debug", action="store_true", help="debug logging")
    args = parser.parse_args()

    if args.debug:
        logging.getLogger().setLevel(logging.DEBUG)
    remotecmd = subprocess.run(
        ["git", "remote", "get-url", "origin"], text=True, capture_output=True
    )
    if remotecmd.returncode != 0:
        print("not a git repo")
        return

    remote = remotecmd.stdout.strip()
    m = re.match(r".*:(.*).git", remote)
    if m:
        fullpath = m.group(1)
    else:
        logger.error("could not figure out path")
        return

    branch = subprocess.check_output(
        ["git", "branch", "--show-current"], text=True
    ).strip()

    logger.info("using path: %s, branch: %s", fullpath, branch)

    mr = merge_request_comments(
        fullpath,
        branch,
        show_resolved=args.resolved,
        show_merge_comments=args.no_merge_comments,
    )
    if not mr:
        print("nada")
        return

    st = "i"
    if "CANNOT" in mr["status"] or mr["pipeline"] == "FAILED":
        st = "e"

    logger.info("---")
    print(f'[{mr["author"]}] {mr["title"]}')
    print(mr["url"])
    print(f'{st}|[status] {mr["status"]} [pipeline] {mr["pipeline"]}')

    for c in mr["comments"]:
        line = ""
        if "file" in c:
            line = f'{c["file"]}:{c["line"]}|{c["type"]}|[{c["author"]}] {c["msg"]}'
        else:
            line = f'{c["type"]}|[{c["author"]}] {c["msg"]}'
        print(line)


if __name__ == "__main__":
    main()
