#!/usr/bin/env python3

from argparse import ArgumentParser
from pathlib import Path
from subprocess import run

import logging
import sys

logging.basicConfig(
    level=logging.WARNING,
    format="%(asctime)s %(filename)s:%(lineno)s [%(levelname)s]: %(message)s",
)


logger = logging.getLogger(__name__)


class ExecutionError(Exception):
    pass


def run_cmd(cmd):
    p = run(cmd, text=True, capture_output=True)
    logger.info(p)
    return p


def has_session(name):
    return run_cmd(["tmux", "has-session", "-t", name]).returncode == 0


def kill_session(name):
    return run_cmd(["tmux", "kill-session", "-t", name]).returncode == 0


def new_pane(pane):
    r = run_cmd(["tmux", "split-pane", "-t", pane, "-PF", "#D", "-c", "$HOME"])
    if r.returncode != 0 and r.stderr.strip() == "no space for new pane":
        run_cmd(["tmux", "next-layout", "-t", pane])
        r = run_cmd(["tmux", "split-pane", "-t", pane, "-PF", "#D", "-c", "$HOME"])
    return r.stdout.strip()


def create_session(name):
    p = run_cmd(["tmux", "new-session", "-ds", name, "-c", "$HOME"])
    if p.returncode != 0:
        raise ExecutionError("could not create session")
    r = run_cmd(["tmux", "list-panes", "-t", name, "-F", "#D"])
    if r.returncode != 0:
        raise ExecutionError("no first pane")
    return r.stdout.strip()


def pane_run_cmds(pane, cmds):
    for cmd in cmds:
        run_cmd(["tmux", "send-keys", "-t", pane, " " + cmd + "\n"])


def load(*, name=None, panes=None, settings=None):
    assert isinstance(name, str)
    assert isinstance(panes, list)
    assert isinstance(settings, list)

    if has_session(name):
        kill_session(name)

    cur_pane = create_session(name)
    pane_run_cmds(cur_pane, panes[0])

    for pane_cmds in panes[1:]:
        cur_pane = new_pane(cur_pane)
        pane_run_cmds(cur_pane, pane_cmds)

    if settings:
        for setting in settings:
            if setting.startswith("#layout"):
                l = setting.split(" ")[1]
                run_cmd(["tmux", "select-layout", "-t", cur_pane, l])
            elif setting.startswith("#main-pane-width"):
                w = setting.split(" ")[1]
                run_cmd(["tmux", "set", "-w", "-t", name + ":1", "main-pane-width", w])
            elif setting.startswith("#main-pane-height"):
                w = setting.split(" ")[1]
                run_cmd(["tmux", "set", "-w", "-t", name + ":1", "main-pane-height", w])
            else:
                logger.error("unknown setting: %s", setting)
                sys.exit(1)
    run_cmd(["tmux", "switch-client", "-t", name])


def parse(specfilename):
    name = Path(specfilename).stem
    if specfilename == "-":
        spec = [l.strip() for l in sys.stdin.read().splitlines() if l.strip()]
        name = "stdin"
    else:
        with open(specfilename) as f:
            spec = [l.strip() for l in f.read().splitlines() if l.strip()]

    panes = []
    settings = []

    for line in spec:
        if line.startswith("#layout"):
            settings.append(line)
        elif line.startswith("#main-pane-"):
            settings.append(line)

    pane_cmds = []
    head = 0
    while True:
        try:
            head = spec.index("#pane", head) + 1
            tail = spec.index("#/pane", head)
        except ValueError:
            break

        for line in spec[head:tail]:
            pane_cmds.append(line)
        panes.append(pane_cmds)
        pane_cmds = []
        head = tail + 1
    return name, panes, settings


def main():
    parser = ArgumentParser()
    parser.add_argument("spec")
    parser.add_argument("-t", "--test", action="store_true")
    parser.add_argument("-d", "--spec-dir", default="~/.cache/tmux-load-session")
    parser.add_argument("-v", action="store_true")

    args = parser.parse_args()
    if args.v:
        logger.setLevel(logging.INFO)

    if args.spec == "select":
        d = Path(args.spec_dir).expanduser()
        d.mkdir(exist_ok=True)

        choices = [x for x in enumerate(d.iterdir())]
        for i, p in choices:
            print(f"{i+1}: {p.stem}")

        choice = input("give index: ")
        spec = choices[int(choice) - 1][1]
    else:
        spec = args.spec

    name, panes, settings = parse(spec)

    for i, pane in enumerate(panes):
        logger.info("%s, %s", i, pane)
        if args.test:
            print(f"\n{i}:")
            for cmd in pane:
                print(f"\t{cmd}")

    if args.test:
        for setting in settings:
            print(setting)
        print()
        return

    try:
        load(name=name, panes=panes, settings=settings)
    except Exception as exc:
        logger.exception("Execution failed: %s", exc)


if __name__ == "__main__":
    main()
